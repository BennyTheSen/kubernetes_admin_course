Let us now deploy an Ingress Controller. First, create a namespace called 'ingress-space'
We will isolate all ingress related objects into its own namespace.
   kubectl create namespace ingress-space

The NGINX Ingress Controller requires a ConfigMap object. Create a ConfigMap object in the ingress-space.
Use the given spec on the right. No data needs to be configured in the ConfigMap.
   see file in directory
   kubectl create -f configmap.yaml --namespace ingress-space

The NGINX Ingress Controller requires a ServiceAccount. Create a ServiceAccount in the ingress-space.
Use the given spec on the right.
   kubectl create serviceaccount ingress-serviceaccount --namespace ingress-space

Let us now deploy the Ingress Controller. Create a deployment using the file given.
The Deployment configuration is given at /root/ingress-controller.yaml. There are several issues with it. Try to fix them.
   see file in directory
   kubectl create -f ingress-controler.yaml --namepsace ingress-space

Let us now create a service to make Ingress available to external users.
Create a service following the given specs.
   kubectl expose deployment -n ingress-space ingress-controller --type=NodePort --port=80 --name=ingress --dry-run -o yaml >ingress.yaml
   edit it and add nodePort:30080
   kubectl create -f ingress.yaml --namespace ingress-space

Create the ingress resource to make the applications available at /wear and /watch on the Ingress service.
Create the ingress in the app-space
   https://kubernetes.io/docs/concepts/services-networking/ingress/
   kubectl get services -o wide --all-namespaces
   see file in directory
   kubectl create -f ing-resource.yaml --namespace app-space
